import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'package:sizer/sizer.dart';
import 'package:wefund/ThemeProvider.dart';

class Autogenerated {
  String? traderName;
  String? traderType;

  Autogenerated({this.traderName, this.traderType});

  factory Autogenerated.fromJson(Map<String, dynamic> json) {
    return Autogenerated(
      traderName: json['Trader Name'],
      traderType: json['Trader Type'],
    );
  }
}

class CopyTradingPage extends StatefulWidget {
  @override
  _CopyTradingPageState createState() => _CopyTradingPageState();
}

class _CopyTradingPageState extends State<CopyTradingPage> {
  List<Autogenerated> tradingSignals = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchTradingSignals();
  }

  Future<void> fetchTradingSignals() async {
    const String apiUrl = 'https://wefundclient.com/Crm/Crm/Copytrading_api.php';

    try {
      final response = await http.get(Uri.parse(apiUrl));

      if (response.statusCode == 200) {
        List<dynamic> jsonData = json.decode(response.body);

        setState(() {
          tradingSignals = jsonData.map((data) => Autogenerated.fromJson(data)).toList();
          isLoading = false;
        });
      } else {
        throw Exception('Failed to load trading signals');
      }
    } catch (error) {
      setState(() {
        isLoading = false;
      });
      print('Error fetching data: $error');
    }
  }

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Trading Signals",
          style: TextStyle(fontSize: 22.px, fontWeight: FontWeight.w700),
          textAlign: TextAlign.center,
        ),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        backgroundColor: themeProvider.isDarkMode ? Colors.black : Colors.white,
      ),
      body: Column(
        children: [
          DefaultTabController(
            length: 2,
            child: Column(
              children: [
                TabBar(
                  isScrollable: true,
                  labelStyle: TextStyle(fontSize: 16.px, fontWeight: FontWeight.bold),
                  unselectedLabelStyle: TextStyle(fontSize: 16.px, fontWeight: FontWeight.normal),
                  tabs: [
                    Tab(text: "TRADING SIGNALS"),
                    Tab(text: "FOLLOWING TRADING SIGNALS"),
                  ],
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    color: Colors.transparent,
                    height: 50.h,
                    child: TabBarView(
                      children: [
                        _buildTradingSignals(),
                        Center(
                          child: Text(
                            "No User Found",
                            style: TextStyle(fontSize: 20.sp, fontWeight: FontWeight.w800),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTradingSignals() {
    if (isLoading) {
      return Center(child: CircularProgressIndicator());
    }

    if (tradingSignals.isEmpty) {
      return Center(
        child: Text(
          "No User Found",
          style: TextStyle(fontSize: 20.sp, fontWeight: FontWeight.w800),
        ),
      );
    }

    return ListView.builder(
      itemCount: tradingSignals.length,
      itemBuilder: (context, index) {
        return Card(
          margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
          elevation: 3,
          child: ListTile(
            title: Text(tradingSignals[index].traderName ?? "No Name"),
            subtitle: Text(tradingSignals[index].traderType ?? "Unknown Type"),
          ),
        );
      },
    );
  }
}
